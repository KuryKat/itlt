import org.gradle.api.java.archives.internal.DefaultManifest

plugins {
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "java" // java plugin is needed for the shadow plugin to work
    id "eclipse"
    id "maven-publish"
    id "net.minecraftforge.gradle" version "4.1.+"
}

version = "1.13.2-2.0.1"
group = "dk.zlepper.itlt" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "itlt"

// MC 1.13.x needs Java 8u232 or older for the dev env to successfully setup
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = "1.8"

println "Java: ${System.getProperty "java.version"}, JVM: ${System.getProperty "java.vm.version"} (${System.getProperty "java.vendor"}), Arch: ${System.getProperty "os.arch"}"
minecraft {
    mappings channel: "snapshot", version: "20190530-1.13.2"

    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

    runs {
        final File runFile = project.file("run")
        client {
            workingDirectory runFile
            property "forge.logging.console.level", "info"
            mods {
                itlt {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory runFile
            property "forge.logging.console.level", "info"
            mods {
                itlt {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory runFile
            property "forge.logging.console.level", "info"
            args "--mod", "itlt", "--all", "--output", file("src/generated/resources/")
            mods {
                itlt {
                    source sourceSets.main
                }
            }
        }
    }
}

configurations {
    shade
}

repositories {
    maven {
        url = "https://cursemaven.com"
        content { includeGroup "curse.maven" }
    }
    mavenCentral()
    maven { url = "https://repository.mulesoft.org/nexus/content/repositories/public/" }
}

dependencies {
    // Forge
    minecraft "net.minecraftforge:forge:1.13.2-25.0.219"

    // itlt uses the "image4j" library to read .ico files
    implementation "com.github.imcdonagh:image4j:0.7.2"
    shade "com.github.imcdonagh:image4j:0.7.2"

    // itlt uses the "Apache Commons Imaging" library to read .icns files
    /*implementation "org.apache.commons:commons-imaging:1.0-alpha2"
    shade "org.apache.commons:commons-imaging:1.0-alpha2"*/
    // due to it being such a big library and not supporting class removal, I've made a single method return null,
    // removed jpeg, tiff, examples and tests and then compiled it. This fork supports removing classes for formats we
    // don't use, therefore allowing us to drastically reduce the shrunk jar's filesize
    implementation files("thirdPartyLibs/commons-imaging-1.0-alpha2-custom.jar")
    shade files("thirdPartyLibs/commons-imaging-1.0-alpha2-custom.jar")
}

ext {
    MANIFEST = manifest {
        attributes([
                "Specification-Title": "itlt",
                "Specification-Vendor": "Paint_Ninja",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor" : "Paint_Ninja",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "itlt.mixins.json",
                "Main-Class": "dk.zlepper.itlt.Main" // so that the pop-up window code works
        ])
    } as DefaultManifest
}

jar {
    manifest.from(MANIFEST)
}

shadowJar {
    archiveClassifier.set("")
    configurations = [project.configurations.shade]

    // Apache Commons Imaging needs to be put somewhere else to prevent a NoClassDefFoundError
    relocate "org.apache.commons.imaging", "${project.group}.shadow.org.apache.commons.imaging"

    manifest.from(MANIFEST)
}

reobf {
    shadowJar { }
}

task shrinkJar(type: Jar, dependsOn: reobfShadowJar) {
    archiveClassifier.set("shrunk")

    final File inputJar = file("${buildDir}/libs/${archivesBaseName}-${project.version}.jar")
    final String shadowGroup = project.group.replace('.','/') + "/shadow"
    final String apacheImaging = "${shadowGroup}/org/apache/commons/imaging"

    from zipTree(inputJar)

    exclude "net/sf/image4j/example/**", "net/sf/image4j/test/**"

    exclude "${apacheImaging}/formats/gif/**", "${apacheImaging}/formats/psd/**", "${apacheImaging}/formats/rgbe/**",
            "${apacheImaging}/formats/xbm/**", "${apacheImaging}/formats/xpm/**", "${apacheImaging}/formats/pnm/**",
            "${apacheImaging}/formats/pcx/**", "${apacheImaging}/formats/dcx/**", "${apacheImaging}/formats/png/**",
            "${apacheImaging}/formats/bmp/**", "${apacheImaging}/formats/wbmp/**", "${apacheImaging}/formats/ico/**"

    exclude "${apacheImaging}/common/itu_t4/**", "${apacheImaging}/common/mylzw/**", "${apacheImaging}/common/BasicCParser**",
            "${apacheImaging}/common/RationalNumber**", "${apacheImaging}/common/GenericImageMetadata**",
            "${apacheImaging}/common/ZlibDeflate**", "${apacheImaging}/common/PackBits**", "${apacheImaging}/icc/**",
            "${apacheImaging}/palette/**", "${apacheImaging}/color/**", "${apacheImaging}/ImageDump**",
            "${apacheImaging}/ColorTools**", "${apacheImaging}/internal/**"

    exclude "META-INF/LICENSE.txt", "META-INF/NOTICE.txt"

    manifest.from(MANIFEST)
}

//tasks.build.dependsOn reobfShadowJar
//jar.finalizedBy reobfShadowJar
tasks.build.dependsOn shrinkJar
jar.finalizedBy shrinkJar